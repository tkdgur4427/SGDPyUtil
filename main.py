import sys
import os

import SGDPyUtil.powershell_utils as powershell_utils


def get_data_path(is_executing_from_kiwoom=False):
    """
    get data absolute path depending on whether executing .py script or binary file made by PyInstaller
    """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        # refer to https://stackoverflow.com/questions/51060894/adding-a-data-file-in-pyinstaller-using-the-onefile-option
        base_path = sys._MEIPASS
    except:
        if is_executing_from_kiwoom:
            base_path = os.path.abspath("./kiwoom")
        else:
            base_path = os.path.abspath(".")
    return base_path


def is_exe_file():
    """
    conditional checking whether we are running exe file generated by PyInstaller
    """
    is_exe_executing = False
    try:
        test = sys._MEIPASS
        is_exe_executing = True
    except:
        is_exe_executing = False
    return is_exe_executing


def get_config_path(is_executing_from_kiwoom=False):
    """
    get config file path
    """
    if is_executing_from_kiwoom:
        base_path = os.path.abspath("./kiwoom")
    else:
        base_path = os.path.abspath(".")
    return base_path


def get_python_x86_path(py_version: str) -> str:
    python_x86_path = os.path.join(
        os.environ["ProgramFiles(x86)"], f"Python{py_version}-32", "python.exe"
    )
    return python_x86_path


def get_python_x64_path(py_version: str) -> str:
    python_x64_path = os.path.join(
        os.environ["ProgramFiles"], f"Python{py_version}", "python.exe"
    )
    return python_x64_path


def is_python_installed(py_version: str, is_x86=False) -> bool:
    python_path = None
    if is_x86:
        python_path = get_python_x86_path(py_version)
    else:
        python_path = get_python_x64_path(py_version)
    return os.path.exists(python_path)


def prepare_py_env(py_version: str, is_x86=False) -> str:
    python_path = None
    new_python_path = None

    if is_x86:
        python_path = get_python_x86_path(py_version)
        new_python_path = os.path.join(
            os.environ["ProgramFiles(x86)"],
            f"Python{py_version}-32",
            f"python{py_version}-32.exe",
        )
    else:
        python_path = get_python_x64_path(py_version)
        new_python_path = os.path.join(
            os.environ["ProgramFiles"],
            f"Python{py_version}",
            f"python{py_version}-64.exe",
        )

    # return python command e.g. python37-64
    python_command = os.path.splitext(os.path.basename(new_python_path))[0]

    # if already new_python_path exists, no need to execute powershell command
    if os.path.exists(new_python_path):
        return python_command

    # execute powershell command
    env_settings_powershell = powershell_utils.PowershellInlineScript()
    env_settings_powershell.add_run_as_admin()
    env_settings_powershell.add_command(
        f"""
# copy new .exe file 
copy "{python_path}" "{new_python_path}";
"""
    )
    powershell_utils.execute_powershell_script(env_settings_powershell)

    return python_command
